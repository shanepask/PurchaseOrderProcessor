// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace IntegrationTests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class ProcessPurchaseOrdersFeature : object, Xunit.IClassFixture<ProcessPurchaseOrdersFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "ProcessPurchaseOrders.feature"
#line hidden
        
        public ProcessPurchaseOrdersFeature(ProcessPurchaseOrdersFeature.FixtureData fixtureData, IntegrationTests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "ProcessPurchaseOrders", "Process a purchase order via an API endpoint", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Supplying the original business case")]
        [Xunit.TraitAttribute("FeatureTitle", "ProcessPurchaseOrders")]
        [Xunit.TraitAttribute("Description", "Supplying the original business case")]
        public void SupplyingTheOriginalBusinessCase()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Supplying the original business case", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 5
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "line item"});
                table1.AddRow(new string[] {
                            "Video \"Comprehensive First Aid Training\""});
                table1.AddRow(new string[] {
                            "Book \"The G irl on the train\""});
                table1.AddRow(new string[] {
                            "Book Club Membership"});
#line 6
 testRunner.Given("I a purchase with the ID of \"123\" for customer \"456\" has the line items", ((string)(null)), table1, "Given ");
#line hidden
#line 11
 testRunner.When("It is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "item",
                            "quantity"});
                table2.AddRow(new string[] {
                            "Video \"Comprehensive First Aid Training\"",
                            "1"});
                table2.AddRow(new string[] {
                            "Book \"The G irl on the train\"",
                            "1"});
#line 12
 testRunner.Then("It produces a shipping slip", ((string)(null)), table2, "Then ");
#line hidden
#line 16
  testRunner.And("The customers current membership is \"Book Club Membership\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Supplying only physical products")]
        [Xunit.TraitAttribute("FeatureTitle", "ProcessPurchaseOrders")]
        [Xunit.TraitAttribute("Description", "Supplying only physical products")]
        public void SupplyingOnlyPhysicalProducts()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Supplying only physical products", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 18
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "line item"});
                table3.AddRow(new string[] {
                            "Video \"Comprehensive First Aid Training\""});
                table3.AddRow(new string[] {
                            "Book \"The G irl on the train\""});
#line 19
 testRunner.Given("I a purchase with the ID of \"123\" for customer \"456\" has the line items", ((string)(null)), table3, "Given ");
#line hidden
#line 23
 testRunner.When("It is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "item",
                            "quantity"});
                table4.AddRow(new string[] {
                            "Video \"Comprehensive First Aid Training\"",
                            "1"});
                table4.AddRow(new string[] {
                            "Book \"The G irl on the train\"",
                            "1"});
#line 24
 testRunner.Then("It produces a shipping slip", ((string)(null)), table4, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Supplying only membership products")]
        [Xunit.TraitAttribute("FeatureTitle", "ProcessPurchaseOrders")]
        [Xunit.TraitAttribute("Description", "Supplying only membership products")]
        public void SupplyingOnlyMembershipProducts()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Supplying only membership products", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 29
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "line item"});
                table5.AddRow(new string[] {
                            "Book Club Membership"});
#line 30
 testRunner.Given("I a purchase with the ID of \"123\" for customer \"456\" has the line items", ((string)(null)), table5, "Given ");
#line hidden
#line 33
 testRunner.When("It is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 34
 testRunner.Then("It produces no shipping slip", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 35
  testRunner.And("The customers current membership is \"Book Club Membership\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Supplying multiple membership products")]
        [Xunit.TraitAttribute("FeatureTitle", "ProcessPurchaseOrders")]
        [Xunit.TraitAttribute("Description", "Supplying multiple membership products")]
        public void SupplyingMultipleMembershipProducts()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Supplying multiple membership products", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 37
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "line item"});
                table6.AddRow(new string[] {
                            "Book Club Membership"});
                table6.AddRow(new string[] {
                            "Video Club Membership"});
                table6.AddRow(new string[] {
                            "Premium Club Membership"});
#line 38
 testRunner.Given("I a purchase with the ID of \"123\" for customer \"456\" has the line items", ((string)(null)), table6, "Given ");
#line hidden
#line 43
 testRunner.When("It is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 44
 testRunner.Then("It produces no shipping slip", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 45
  testRunner.And("The customers current membership is \"Premium Club Membership\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Supplying multiples of the same product")]
        [Xunit.TraitAttribute("FeatureTitle", "ProcessPurchaseOrders")]
        [Xunit.TraitAttribute("Description", "Supplying multiples of the same product")]
        public void SupplyingMultiplesOfTheSameProduct()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Supplying multiples of the same product", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 47
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "line item"});
                table7.AddRow(new string[] {
                            "Video \"Comprehensive First Aid Training\""});
                table7.AddRow(new string[] {
                            "Book \"The G irl on the train\""});
                table7.AddRow(new string[] {
                            "Book \"The G irl on the train\""});
                table7.AddRow(new string[] {
                            "Book \"The G irl on the train\""});
#line 48
 testRunner.Given("I a purchase with the ID of \"123\" for customer \"456\" has the line items", ((string)(null)), table7, "Given ");
#line hidden
#line 54
 testRunner.When("It is processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "item",
                            "quantity"});
                table8.AddRow(new string[] {
                            "Video \"Comprehensive First Aid Training\"",
                            "1"});
                table8.AddRow(new string[] {
                            "Book \"The G irl on the train\"",
                            "3"});
#line 55
 testRunner.Then("It produces a shipping slip", ((string)(null)), table8, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                ProcessPurchaseOrdersFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                ProcessPurchaseOrdersFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
